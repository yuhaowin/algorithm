hash function

1、input 范围是无限的 ,out   范围是相对有县的
2、不是随机，输入相同输出一定相同
3、一定会产生哈希碰撞
4、离散性


把哈希值 % 10 会均匀分散在 0-9


------------------------------

使用布隆过滤器考虑因素：
1、数据规模
2、样本大小
3、失误率

位图的长度为 M
如果hash函数过少，会导致采样过少，失误率上升
如果hash函数过少，会导致 M 消耗过快，失误率上升

![013508](https://image.yuhaowin.com/2022/05/15/013508.png)

通过 2 个哈希函数得到 k 个哈希函数
h1 = 1*f1+f2
h2 = 2*f1+f2
h3 = 3*f1+f2
hk = k*f1+f2


------------------------------

一致性哈希 - 解决数据存储问题
1、哈希环
2、虚拟节点

如果是经典的哈希使用方式，增加减少机器，数据的迁移是全量的

哈希环

机器标识 hash 后上环

数据 hash 后不取%，放在顺时针遇到的第一台机器上

一、机器少的时候可以出现负载不均衡的问题 - 因为机器没有均分 hash 环
二、哪怕人为分配 hash 给机器，添加节点是也会导致负载不均衡
通过虚拟节点解决 - 实际就是扩大节点数量，在大数据量下分配均匀，将一组节点归宿某一个物理机器
还可以通过这个给不同的机器分配不同的负载，实现负载管理
