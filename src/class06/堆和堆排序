+ 比较器
    重载比较运算符
    运用在有序表 - TreeMap，堆 - heap，需要排序的结构里

+ 堆结构
    1) 堆结构就是用数组实现的完全二叉树结构
    2) 完全二叉树中如果每棵子树的最大值都在顶部就是大根堆
    3) 完全二叉树中如果每棵子树的最小值都在顶部就是小根堆
    4) 堆结构的 heapInsert 与 heapify 操作
    5) 堆结构的增大和减少
    6) 优先级队列结构，就是堆结构


+ Priority Queue 优先级队列使用的数据结构就是堆

+ 完全二叉数
    如果一个树，是满的，或者处于变满的路上(从左往右依次变满)，那么这颗树，就是完全二叉树。
    使用数组实现完全二叉树，从下标 0 开始的连续的区间，可以形成一颗完全二叉树，其中下标 0 位置为树的根结点。
    它们每一个节点 i 都有以下规律：
    i 的父节点：(i-1)/2
    i 的左节点：2*i + 1
    i 的右节点：2*i + 2


+ 向堆中插入一个元素 - shift up   的过程(以大根堆为例)
    新添加一个元素，要维持大根堆的结构，就是当前元素和它的父节点比较，如果大于它父节点交换位置，再和此时它的父节点比较，直到不大于其父节点或者到了根节点。

+ 此时数组中，最大的元素在下标 0 位置

+ 向堆中取出一个元素 - shift down 的过程(以大根堆为例)
    假设需要弹出最大值,需要将最后一个值和根节点交换，然后 heap size--，将新的根节点和它的两个子节点比较，如果子节点中较大的节点是大于父节点的，父节点和
    这个较大的子节点交换。重复这个过程，直到不大于父节点或者到达 heap size 位置。

+ 把一个数组从后往前依次使用 shift down 构造成一个堆的过程叫 heapify
    heapify 的时间复杂度：O(n)